# Prerequisites
#
# - Create a new GCP project 
# - Navigate to your project Compute> VM section
# - Install the gcloud tool (https://cloud.google.com/sdk/)

------------------- SETUP -----------------------
# 0. PREPARE LOCAL WORKING AREA
# - Create a working directory, cd into it
# - Open Terminal
# - Authenticate by running `gcloud auth login`
#
gcloud auth login 
#

# 1. SET VARIABLES
# parameterize how many server & clients we need
# Uncomment step-6 if number of servers >= 32 //don't understand this
#
export NUM_AS_SERVERS=10                      //are these minimum numbers?
export NUM_AS_CLIENTS=20                      //are these minimum numbers?
export ZONE=us-central1-b
export PROJECT=<your-project-name>
export SERVER_INSTANCE_TYPE=n1-standard-8
export CLIENT_INSTANCE_TYPE=n1-highcpu-8
export USE_PERSISTENT_DISK=0
#

# 2. SET DEFAULTS
# set the default project & zone so that we donâ€™t need to pass it each time
#
gcloud config set project $PROJECT
gcloud config set compute/zone $ZONE
#

# 3. CREATE SERVER GCE VMS AND DISKS
# In parallel, create server instances from the image. Create persistent disks if requested (takes time. dont press ctrl-c)
# You will see the instances become available in the GCP console, COMPUTE>VMs
#
gcloud compute instances create `for i in $(seq 1 $NUM_AS_SERVERS); do echo as-server-$i; done` --zone $ZONE --machine-type $SERVER_INSTANCE_TYPE --tags "http-server" --image aerospike-image-1 --image-project $PROJECT
if [ $USE_PERSISTENT_DISK -eq 1 ]
then
  gcloud compute disks create `for i in $(seq 1 $NUM_AS_SERVERS); do echo as-persistent-disk-$i; done` --zone $ZONE --size "500GB"
  for i in $(seq 1 $NUM_AS_SERVERS); do 
    echo "server-$i: "
    gcloud compute instances attach-disk as-server-$i --disk as-persistent-disk-$i
  done
fi
#

# 4. UPDATE/UPLOAD THE CONFIG FILES
# Replace the config file path and the username with the desired ones   //any non-standard conf file settings?
#
for i in $(seq 1 $NUM_AS_SERVERS); do 
  echo -n "server-$i: "
  gcloud compute copy-files inmem_only_aerospike.conf sunil@as-server-$i:aerospike.conf    //<username>>@as-server-$1:... ?
  gcloud compute ssh as-server-$i --zone $ZONE --command "sudo mv ~/aerospike.conf /etc/aerospike/aerospike.conf"
done
#

# 5. MODIFY CONFIG FILES TO SETUP MESH    //how do I verify this succeeded?
server1_ip=`gcloud compute instances describe as-server-1 --zone $ZONE | grep networkIP | cut -d ' ' -f 4`
for i in $(seq 1 $NUM_AS_SERVERS); do 
  echo -n "server-$i: "
  gcloud compute ssh as-server-$i --zone $ZONE --command "sudo sed -i 's/mesh-address .*/mesh-address $server1_ip/g' /etc/aerospike/aerospike.conf"
done
#

# 6. MODIFY CONFIG FILES AGAIN FOR MORE THAN 32 NODES ONLY
# This step is needed if going beyond the default limit of 32 nodes. Uncomment if needed  //don't understand, why?
# This command should be run only once as it will add a new line to the config file every time it runs.
#for i in $(seq 1 $NUM_AS_SERVERS); do 
#echo -n "server-$i: "
#gcloud compute ssh as-server-$i --zone $ZONE --command "sudo sed -i 's/proto-fd-max 15000/proto-fd-max 15000\n\tpaxos-max-cluster-size 60/g' /etc/aerospike/aerospike.conf"
#done

# 7. CREATE CLIENT VMS
# In prallel, create client boot-disks and client instances (takes time. dont press ctrl-c)
# You will see the disks become available in the GCP console, COMPUTE>Disks
#
gcloud compute instances create `for i in $(seq 1 $NUM_AS_CLIENTS); do echo as-client-$i; done` --zone $ZONE --machine-type $CLIENT_INSTANCE_TYPE --tags "http-server" --image aerospike-image-1 --image-project $PROJECT
#

# 8. BOOT SERVERS TO CREATE CLUSTER
# We are running server only on 7 cores (0-6) out of 8 cores using the taskset command  //need better explanation of taskset
# network latencies take a hit when all the cores are busy
#
for i in $(seq 1 $NUM_AS_SERVERS); do 
  echo -n "server-$i: "
  gcloud compute ssh as-server-$i --zone $ZONE --command "sudo taskset -c 0-6 /usr/bin/asd --config-file /etc/aerospike/aerospike.conf"
done
#

# 9. START AMC (Aerospike Management Console) on server-1
# Find the public IP of as-server-1 and in your browser open http://<public ip of server-1>:8081
# Then enter the internal IP in the dialog box in the AMC window http://<internal IP of server-1>:3000
# You can find the IPs on GCP console, COMPUTE>click on instance named 'server-1'
# You may need to create firewall rules to open the ports, GCP console, COMPUTE>Firewalls
#
gcloud compute ssh as-server-1 --zone $ZONE --ssh-flag="-t" --command "sudo service amc start"
#

------------------- LOAD -----------------------

# 10. SET LOAD PARAMETERS
#
export NUM_KEYS=100000000
export CLIENT_THREADS=256
server1_ip=`gcloud compute instances describe as-server-1 --zone $ZONE | grep networkIP | cut -d ' ' -f 4`
#

# 11. DO INSERTS 
# 
num_keys_perclient=$(expr $NUM_KEYS / $NUM_AS_CLIENTS )
for i in $(seq 1 $NUM_AS_CLIENTS); do 
  startkey=$(expr \( $NUM_KEYS / $NUM_AS_CLIENTS \) \* \( $i - 1 \) )
  echo -n "client-$i: "
  gcloud compute ssh as-client-$i --zone $ZONE --command "cd ~/aerospike-client-java/benchmarks ; ./run_benchmarks -z $CLIENT_THREADS -n test -w I -o S:50 -b 3 -l 20 -S $startkey -k $num_keys_perclient -latency 10,1 -h $server1_ip > /dev/null &"
done
#

# 12. RUN READ-MODIFY-WRITE LOAD and also READ LOAD with desired read percentage
# start two instances of the client on each machine
#
server1_ip=`gcloud compute instances describe as-server-1 --zone $ZONE | grep networkIP | cut -d ' ' -f 4`
export READPCT=100
for i in $(seq 1 $NUM_AS_CLIENTS); do 
  echo -n "client-$i: "
  gcloud compute ssh as-client-$i --zone $ZONE --command "cd ~/aerospike-client-java/benchmarks ; ./run_benchmarks -z $CLIENT_THREADS -n test -w RU,$READPCT -o S:50 -b 3 -l 20 -k $NUM_KEYS -latency 10,1 -h $server1_ip > /dev/null &"
  gcloud compute ssh as-client-$i --zone $ZONE --command "cd ~/aerospike-client-java/benchmarks ; ./run_benchmarks -z $CLIENT_THREADS -n test -w RU,$READPCT -o S:50 -b 3 -l 20 -k $NUM_KEYS -latency 10,1 -h $server1_ip > /dev/null &"
done
#

# 13. STOP THE LOAD
# 
for i in $(seq 1 $NUM_AS_CLIENTS); do 
  echo -n "client-$i: "
  gcloud compute ssh as-client-$i --zone $ZONE --command "kill \`pgrep java\`"
done
#

------------------- CLEAN -----------------------

# 14. STOP SERVERS
# 
for i in $(seq 1 $NUM_AS_SERVERS); do 
  echo -n "server-$i: "
  gcloud compute ssh as-server-$i --zone $ZONE --command "sudo kill \`pgrep asd\`"
done
#

# 15. DELETE DISKS
# 
if [ $USE_PERSISTENT_DISK -eq 1 ]
then
  for i in $(seq 1 $NUM_AS_SERVERS); do 
    gcloud compute instances detach-disk as-server-$i --disk as-persistent-disk-$i
  done
  gcloud compute disks delete `for i in $(seq 1 $NUM_AS_SERVERS); do echo as-persistent-disk-$i; done` --zone $ZONE -q
fi
#

# 16. SHUTDOWN ALL INSTANCES
# 
gcloud compute instances delete --quiet --zone $ZONE `for i in $(seq 1 $NUM_AS_SERVERS); do echo -n as-server-$i " "; done`
gcloud compute instances delete --quiet --zone $ZONE `for i in $(seq 1 $NUM_AS_CLIENTS); do echo -n as-client-$i " "; done`
#
